// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model representing users of the system
model User {
  id          String    @id @default(uuid())
  email       String    @unique
  name        String
  password    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  profile     UserProfile?  // User can have optional profile
  booking    Booking[]  // User can have multiple bookings

  @@map("users")
}

// UserProfile model representing additional information about users
model UserProfile {
  id           String    @id @default(uuid())
  userId       String    @unique
  bio          String?
  profession   String?
  address      String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id])

  @@map("user_profiles")
}

// Flat model representing properties available for rent
model Flat {
  id                    String     @id @default(uuid())
  squareFeet            Int
  totalBedrooms         Int
  totalRooms            Int
  utilitiesDescription  String
  location              String     // Consider using structured location data
  description           String
  rent                  Int
  availability          Boolean    @default(true)
  advanceAmount         Int
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  booking              Booking[]  // Flats can have multiple bookings

  @@map("flats")
}

// Booking model representing bookings made by users for flats
model Booking {
  id          String    @id @default(uuid())
  userId      String    @unique
  flatId      String    @unique
  status      Boolean
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  flat        Flat      @relation(fields: [flatId], references: [id])

  @@map("bookings")
}

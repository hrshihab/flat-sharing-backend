// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model representing users of the system
model User {
  id          String    @id @default(uuid())
  email       String    @unique
  username    String    @unique
  password    String
  needPasswordChange Boolean    @default(true)
  profilePhoto  String?
  role        Role    @default(USER)
  status     UserStatus @default(ACTIVE)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  booking    Booking[]  // User can have multiple bookings
  flat       Flat[]     // User can have multiple flats

  @@map("users")
}


// Flat model representing properties available for rent
model Flat {
  id             String       @id  @default(uuid())
  location       String
  description    String
  rentAmount     Float
  bedrooms       Int
  amenities      String[]
  photos         String[] 
  userId          String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  

  user        User      @relation(fields: [userId], references: [id])
  booking              Booking[]  // Flats can have multiple bookings

  @@map("flats")
}

// Booking model representing bookings made by users for flats
model Booking {
  id          String    @id @default(uuid())
  userId      String    
  flatId      String 
  name        String
  age         Int
  profession  String
  maritalStatus MaritalStatus 
  PresentAddress     String 
  phoneNo     String  
  status      Status    @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  flat        Flat      @relation(fields: [flatId], references: [id])

  @@map("bookings")
  //compound unique constraint
  @@unique([userId, flatId])
}

enum Status {
  APPROVED
  PENDING
  REJECTED
}

enum Role {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}


enum MaritalStatus {
  SINGLE
  MARRIED
  SEPERATED
}